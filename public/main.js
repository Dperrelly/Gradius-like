"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var app = angular.module('Gradius', ['ui.router']);
app.config(function ($locationProvider) {
	$locationProvider.html5Mode(true);
});

app.factory("Enemy", function (View, Player, Utility) {
	var exports = {};
	exports.enemies = {};

	var idCounter = 0;

	var Enemy = (function () {
		function Enemy(x, y) {
			_classCallCheck(this, Enemy);

			this.position = { x: x, y: y };
			this.id = idCounter++;
		}

		_createClass(Enemy, [{
			key: 'takeDamage',
			value: function takeDamage(damage) {
				this.health -= damage;

				if (this.health <= 0) {
					this.terminate();
				}
			}
		}, {
			key: 'terminate',
			value: function terminate() {
				delete exports.enemies[this.id];
				View.containers.enemies.removeChild(this.img);
			}
		}]);

		return Enemy;
	})();

	var Worm = (function (_Enemy) {
		_inherits(Worm, _Enemy);

		function Worm(x, y) {
			_classCallCheck(this, Worm);

			_get(Object.getPrototypeOf(Worm.prototype), 'constructor', this).call(this, x, y);
			this.health = 5;
			this.radius = 50;
			this.swerver = Math.random();
			this.speed = 400;
			this.img = new PIXI.Sprite(View.textures.enemy1);
			this.img.position = this.position;
			View.center(this.img);
			this.img.scale.x = 0.15;
			this.img.scale.y = 0.15;
		}

		_createClass(Worm, [{
			key: 'update',
			value: function update(delta) {
				this.position.x -= this.speed * delta;
				this.position.y += Math.sin(this.swerver) * 2;
				this.swerver += 0.1;

				if (Utility.isInRadius(this, Player.player)) {
					Utility.playerDeath();
				}

				Utility.boundsCheck(this);
			}
		}]);

		return Worm;
	})(Enemy);

	exports.createWorm = function (spawn) {
		var enemy = new Worm(spawn[0], spawn[1]);
		exports.enemies[enemy.id] = enemy;
		View.containers.enemies.addChild(enemy.img);
	};

	exports.updateAll = function (delta) {
		angular.forEach(exports.enemies, function (enemy) {
			enemy.update(delta);
		});
	};

	exports.terminateAll = function () {
		angular.forEach(exports.enemies, function (enemy) {
			enemy.terminate();
		});
	};

	return exports;
});
app.factory("Input", function () {

	var Key = {
		doubleTapEffect: {},

		_pressed: {},

		_lastKeyHit: null,

		_timeOfLastInput: null,

		LEFT: 37,
		UP: 38,
		RIGHT: 39,
		DOWN: 40,
		R: 82,
		SPACE: 32,

		directions: ['LEFT', 'UP', 'RIGHT', 'DOWN'],

		isDown: function isDown(keyCode) {
			return this._pressed[keyCode];
		},

		onKeydown: function onKeydown(event) {
			if ([32, 37, 38, 39, 40].indexOf(event.keyCode) > -1) {
				event.preventDefault();
			}

			if (this.isDoubleTap(event) && this.doubleTapEffect[event.keyCode]) {
				this.doubleTapEffect[event.keyCode]();
			}
			this._pressed[event.keyCode] = true;
			this._lastKeyHit = event.keyCode;
			this._timeOfLastInput = Date.now();
		},

		onKeyup: function onKeyup(event) {
			delete this._pressed[event.keyCode];
		},

		isDoubleTap: function isDoubleTap(event) {
			return this._lastKeyHit === event.keyCode && Date.now() - this._timeOfLastInput < 150 && !this.isDown(event.keyCode);
		}
	};

	window.addEventListener('keyup', function (event) {
		Key.onKeyup(event);
	}, false);
	window.addEventListener('keydown', function (event) {
		Key.onKeydown(event);
	}, false);

	return Key;
});
app.factory("Level", function (Player, View, Enemy, Utility) {
	var exports = {
		levels: []
	};

	var Level = function Level(spawnX, spawnY) {
		_classCallCheck(this, Level);

		this.spawn = { x: spawnX, y: spawnY };
		this.enemies = [{ spawn: [0, 0] }];
		this.img = new PIXI.Sprite(View.textures.bg1);
		//this.img.height = View.canvasHeight;
		//this.img.width = View.canvasWidth;
		console.log(this.img);
		View.center(this.img);
	};

	exports.levels[0] = new Level(100, 100);

	exports.load = function (level) {
		Enemy.terminateAll();
		Player.spawn(level.spawn);
		level.enemies.forEach(function (enemy) {
			Enemy.createWorm(enemy.spawn);
		});
		View.containers.background.removeChildren();
		View.containers.background.addChild(level.img);
	};

	exports.update = function () {
		if (Math.random() * 100 < 9) {
			Enemy.createWorm([1000, Math.random() * View.canvasWidth]);
		}
	};

	return exports;
});
app.factory("Player", function (View, Input, Utility) {
	var Player = {};

	var Ship = (function () {
		function Ship(x, y) {
			_classCallCheck(this, Ship);

			this.position = { x: x, y: y };
			this.speed = 300;
			this.radius = 10;
			this.lastFired = 0;
			this.img = new PIXI.Sprite(View.textures.ship);
			this.img.position = this.position;
			this.img.rotation = 3.14 / 2;
			this.img.scale.x = 0.1;
			this.img.scale.y = 0.1;
			View.center(this.img);
			View.containers.player.addChild(this.img);
		}

		_createClass(Ship, [{
			key: 'update',
			value: function update(delta) {

				Input.directions.forEach(function (direction) {
					if (Input.isDown(Input[direction])) Player.player.move(delta, Player.player.speed, direction);
				});

				if (Utility.isOutOfBounds(this)) {
					Utility.playerDeath();
				}
			}
		}, {
			key: 'move',
			value: function move(delta, distance, direction) {
				switch (direction) {
					case 'UP':
						{
							this.position.y -= distance * delta;
							break;
						}
					case 'DOWN':
						{
							this.position.y += distance * delta;
							break;
						}
					case 'LEFT':
						{
							this.position.x -= distance * delta;
							break;
						}
					case 'RIGHT':
						{
							this.position.x += distance * delta;
							break;
						}
				}
			}
		}, {
			key: 'addWarpDrive',
			value: function addWarpDrive() {
				Input.directions.forEach(function (direction) {
					Input.doubleTapEffect[Input[direction]] = function () {
						Player.player.move(1, 200, direction);
					};
				});
			}
		}, {
			key: 'terminate',
			value: function terminate() {
				View.containers.player.removeChild(this.img);
			}
		}, {
			key: 'die',
			value: function die() {}
		}]);

		return Ship;
	})();

	Player.spawn = function (spawnPoint) {
		if (Player.player) Player.player.terminate();
		Player.player = new Ship(spawnPoint.x, spawnPoint.y);
		Player.player.addWarpDrive();
	};

	return Player;
});

app.factory("PlayerAttack", function (View, Enemy, Player, Utility, Input) {
	var idCounter = 0;

	var attacks = {};

	var BasicAttack = (function () {
		function BasicAttack(spawn) {
			_classCallCheck(this, BasicAttack);

			this.position = angular.copy(spawn);
			this.id = idCounter++;
			this.lastFired = 0;
			this.power = 1;
			this.speed = 1000;
			this.radius = 5;
			this.img = new PIXI.Sprite(View.textures.enemy1);
			this.img.position = this.position;
			View.center(this.img);
			this.img.scale.x = 0.03;
			this.img.scale.y = 0.03;
		}

		_createClass(BasicAttack, [{
			key: 'update',
			value: function update(delta) {
				var _this = this;

				this.position.x += this.speed * delta;

				angular.forEach(Enemy.enemies, function (enemy) {
					if (Utility.isInRadius(enemy, _this)) {
						enemy.takeDamage(_this.power);
						_this.terminate();
					}
				});

				Utility.boundsCheck(this);
			}
		}, {
			key: 'terminate',
			value: function terminate() {
				delete attacks[this.id];
				View.containers.enemies.removeChild(this.img);
			}
		}]);

		return BasicAttack;
	})();

	return {

		BasicAttack: BasicAttack,

		addAttack: function addAttack(attack) {
			attacks[attack.id] = attack;
			View.containers.enemies.addChild(attack.img);
		},

		updateAll: function updateAll(delta) {
			angular.forEach(attacks, function (attack) {
				attack.update(delta);
			});
		}
	};
});

app.factory("Utility", function ($rootScope) {
	var exports = {};

	exports.isInRadius = function (circle1, circle2) {
		var dx = circle1.position.x - circle2.position.x;
		var dy = circle1.position.y - circle2.position.y;
		var distance = Math.sqrt(dx * dx + dy * dy);

		return distance < circle1.radius + circle2.radius;
	};

	exports.playerDeath = function () {
		$rootScope.$emit('playerDeath', function () {});
	};

	exports.isOutOfBounds = function (obj) {
		if (obj.position.x < 0 || obj.position.x > 1000 || obj.position.y < 0 || obj.position.y > 700) {
			return true;
		} else return false;
	};

	exports.boundsCheck = function (obj) {
		if (exports.isOutOfBounds(obj)) {
			obj.terminate();
		}
	};

	return exports;
});

app.factory("View", function () {
	var exports = {};

	exports.canvasWidth = 1000;
	exports.canvasHeight = 700;

	exports.renderer = PIXI.autoDetectRenderer(exports.canvasWidth, exports.canvasHeight);
	document.body.appendChild(exports.renderer.view);
	console.log(exports.renderer);

	//   function resizeCanvas() {
	//       exports.renderer.width = window.innerWidth;
	//       exports.renderer.height = window.innerHeight;
	//   }

	// window.addEventListener('resize', resizeCanvas, false);   

	exports.textures = {};
	exports.textures.enemy1 = PIXI.Texture.fromImage("/images/enemy1.png");
	exports.textures.ship = PIXI.Texture.fromImage("/images/ship.png");
	exports.textures.bg1 = PIXI.Texture.fromImage("/images/background.jpg");

	exports.init = function () {
		var containers = ['background', 'enemies', 'attacks', 'player', 'ui'];
		exports.containers = {
			main: new PIXI.Container()
		};
		containers.forEach(function (container) {
			exports.containers[container] = new PIXI.Container();
			exports.containers.main.addChild(exports.containers[container]);
		});
	};

	exports.center = function (img) {
		img.pivot.x = 0.5;
		img.pivot.y = 0.5;
		img.anchor.x = 0.5;
		img.anchor.y = 0.5;
	};

	return exports;
});

app.factory("Weapon", function (PlayerAttack, Player, Input) {
	var BasicWeapon = (function () {
		function BasicWeapon() {
			_classCallCheck(this, BasicWeapon);

			this.shotInterval = 100;
			this.lastFired = 0;
		}

		_createClass(BasicWeapon, [{
			key: 'shoot',
			value: function shoot() {
				PlayerAttack.addAttack(new PlayerAttack.BasicAttack(Player.player.position));
			}
		}, {
			key: 'update',
			value: function update() {
				if (Input.isDown(Input.SPACE) && Date.now() - this.lastFired > this.shotInterval) {
					this.shoot();
					this.lastFired = Date.now();
				}
			}
		}]);

		return BasicWeapon;
	})();

	var DoubleWeapon = (function (_BasicWeapon) {
		_inherits(DoubleWeapon, _BasicWeapon);

		function DoubleWeapon() {
			_classCallCheck(this, DoubleWeapon);

			_get(Object.getPrototypeOf(DoubleWeapon.prototype), 'constructor', this).call(this);
			this.shotInterval = 200;
		}

		_createClass(DoubleWeapon, [{
			key: 'shoot',
			value: function shoot() {
				PlayerAttack.addAttack(new PlayerAttack.BasicAttack({ x: Player.player.position.x, y: Player.player.position.y - 10 }));
				PlayerAttack.addAttack(new PlayerAttack.BasicAttack({ x: Player.player.position.x, y: Player.player.position.y + 10 }));
			}
		}]);

		return DoubleWeapon;
	})(BasicWeapon);

	return {
		currentWeapon: new DoubleWeapon()
	};
});

app.controller("PlayController", function ($rootScope, Weapon, PlayerAttack, View, Level, Enemy, Player, Input) {
	function init() {
		View.init();
	}
	init();

	var state = "playing";
	var scoreCounter = 0;
	var score = new PIXI.Text('0', { font: '24px Arial', fill: 0xff0000 });
	score.position = { x: 1, y: 1 };
	View.containers.ui.addChild(score);

	$rootScope.$on('playerDeath', function (event, data) {
		state = "dead";
	});

	function updateAll(delta) {
		Enemy.updateAll(delta);
		Player.player.update(delta);
		PlayerAttack.updateAll(delta);
		Level.update(delta);
		Weapon.currentWeapon.update();
	}

	Level.load(Level.levels[0]);

	var delta = 1;
	var now = Date.now();

	var updateScore = function updateScore(delta) {
		scoreCounter += delta * 50;
		score.text = String(Math.floor(scoreCounter));
	};

	var update = function update(then) {
		now = Date.now();
		delta = (now - then) / 1000;

		if (state === "playing") {
			updateAll(delta);
			updateScore(delta);
		}

		if (state === "dead") {
			if (Input.isDown(Input.R)) {
				Level.load(Level.levels[0]);
				scoreCounter = 0;
				state = "playing";
			}
		}
		View.renderer.render(View.containers.main);
		window.requestAnimationFrame(update.bind(null, now));
	};
	update(Date.now());
});

app.config(function ($stateProvider) {
	$stateProvider.state('play', {
		url: '/play',
		controller: 'PlayController',
		template: ''
	});
});
//# sourceMappingURL=data:application/json;base64,
